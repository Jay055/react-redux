// The CONTEXT SYSTEM WITH REACT //

With the context system you can pass information from the parent compoent to nested components direclty. 


// Ways we get information in and out of a context object 


Default Value        or     Parent Component 
                    data 
this.context                      Consumer


// Creating Context Objects 
The challenge in creating context isn't in creating but in getting information in and out. 

How to set up contexts
1. We  create a new context file  (LanguageContext.js)

2. import React from 'react'; 

3. // We can include a default value in the context English then connect to our nexted children
export default React.createContext('English'); 


// Link Contexts 
import in the file to be linked to 
Set up contextType in the file to be linked to eg. 
class Button extends React.Component {
  static contextType = LanguageContext;  //---- Special name

  static: Adding property to a class directly 
  Button.contextType === static contextType
  Button.contextType would be done outside the class

  // Change the value inside the context object 
  We have to communicate from the App component with the Provider component (different from redux).
  1. We would wrap the provider link with what we need to change 
        <LanguageContext.Provider value={this.state.language}>
        <UserCreate />
        </LanguageContext.Provider>

  Value= the state we want to change. 
  value=(can be any source of data)


// Breakdown of what we achieved with the provider component 
1. Application loads up in the browser. 
2. We create a context object with a default value of 'english'
3. App component gets rendered, creates a Provider that wraps UserCreate.
4. Provider updates the value of the context object to 'this.state.langauge'
5. Button and Field reach into context object, see the value from 'this.state.langauge'
6. Button and Field render appropriate text to the screen. 

// Each separate use of LanguageContext.Provider creates a new seperate pipe of information. 

        <LanguageContext.Provider value={this.state.language}>
        <UserCreate />
        </LanguageContext.Provider>
        <LanguageContext.Provider value={'english'}>
        <UserCreate />
        </LanguageContext.Provider>
        <LanguageContext.Provider value={'dutch'}>
        <UserCreate />
        </LanguageContext.Provider>
        <LanguageContext.Provider value={this.state.language}>
Each one has a different value. 

//< 309 Accessing Data with Consumers ----> 
1. The second way we can access data with context is through consumers. 
2. Consumer is a react component we can use to get info out of our context.

// Changing the Button to use the  Consumer Approach 
<LanguageContext.Consumer>
 We always pass one child which would be a function which would be automatially called
 {(value) => value=== 'english' ? 'Submit' : 'Vorleggen'}
 We can include it in a renderMethod. 


//<-------------- PULLING FROM MULTIPLE CONTEXTS -----------------> 
 // Why do we use the Consumer Context 
 We use the consumer whenever we need to get multiple contexts.
 Provider would be used for single context values. 

We would edit our Button.js to support multiple context values, by creating a ColorContext.js file. 


//<---------Replacing Redux with Context --------------> 
Redux                                   ||     Context     
Distributes data to various components  ||    Distrubes data to various components 
Centralizes data in a store               ||
Provides mechanism for changing data in the store  ||


We would look at possible ways to achieve similar with Context. 

// Creating a Store Component
IF WE WANT TO USE CONTEXT IN PLACE OF REDUX     
1. We need to be able to get data to any component in our hierarchy. 
2. We need to be able to seperate our view logic from business logic. 
Business logic can be describes as states and setting states while view logic the rendering of the DOM. Most times we mix both and with Redux it's not a problem 
since we have the Reducers and action. 
3. We need to be able to split business logic (not have a single file with 10000 lines of code.)




// Implementing a Language Store 
1. To seperate our view from business logic we would create seperate files for view and business logic. 
2. We would achieve that by creating a Language Store  in LanguageContext.js which would have our business logic.
3. In LanguageContext.js we provide  our state and callback function, which would be passed to other components by the value property. 

<LanguageContext.Provider Value={language + onLanguageChange} /> 

<Context.Provider  value={{ ...this.state, onLanguageChange: this.onLanguageChange }} >
      {this.props.children}   // Nest for access to other components
</Context.Provider>

4. For other components to be able to view the logic we would need to nest then inside the Context.Provider tag which would be achieved by {this.props.children}

5. Export LanguageStore and LanguageContext.


// RENDERING THE LANGUAGE STORE 
1. We would render the language store in App.js file. We can remove all logic from the file now and also our Context tag since it's included in the language store. 
Import LanguageStore

//Connecting the Selector to the Store 
LanguageSelector Component we can use the this.context approach since it's only one passingdown. 
We would change our all back from this.props === this.context 

//Connecting our Field and Button Component to the Store 
1. Now our Context has a language property and a function to get value from it we would need to use the this.context.language
2. We can also just use destructuring. 
 {( { language }) => this.renderSubmit(language)}
 then change our other values to language also. 


 // CONTEXT VS REDUX WHICH DO WE USE 
 Redux                                                
 Excellent Documentation 
 Well-know design patterns 
 Tremendous smount of open source libraries 


 CONTEXT
 No need for an extra lib 
 Hard to build a 'store' component with cross cutting concerns. 
 
