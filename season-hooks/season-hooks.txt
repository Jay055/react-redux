Converting Our Season App to Season Hooks. 


// class App extends React.Component {
//   state = { lat: null, errorMessage: '' };

//   componentDidMount() {
//     window.navigator.geolocation.getCurrentPosition(
//       position => this.setState({ lat: position.coords.latitude }),
//       err => this.setState({ errorMessage: err.message })
//     );
//   }

//   renderContent() {
//     if (this.state.errorMessage && !this.state.lat) {
//       return <div>Error: {this.state.errorMessage}</div>;
//     }

//     if (!this.state.errorMessage && this.state.lat) {
//       return <SeasonDisplay lat={this.state.lat} />;
//     }

//     return <Spinner message="Please accept location request" />;
//   }

//   render() {
//     return <div className="border red">{this.renderContent()}</div>;
//   }
// }



becomes 

userLocation.js, function
----------
import { useState, useEffect } from 'react'; 

export default () => {

  const [ lat, setLatitute] = useState(null);
  const [ errorMessage, setErrorMessage] = useState('');
  
  
  
  
  useEffect(() => { 
    window.navigator.geolocation.getCurrentPosition(
    position => setLatitute(position.coords.latitude),
    err => setErrorMessage(err.message)
  );
  }, []); 

  return [lat, errorMessage];
// we need only the lat and errorMessage, it's advised to use arrays with Hooks 
  
}
--------
Index.js becomes 
import useLocation from './useLocation';


const App = () => { 
  const [lat, errorMessage] = useLocation();

let content; 
if(errorMessage) {
  content=<div>Error: {errorMessage}</div>
} else if (lat) {
  content=<SeasonDisplay lat={lat} />
} else {
  content =  <Spinner message="Please accept location request" />;
}

return <div className="border red">{content}</div>
};


//